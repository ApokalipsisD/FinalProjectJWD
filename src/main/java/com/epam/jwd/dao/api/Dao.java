package com.epam.jwd.dao.api;

import com.epam.jwd.dao.entity.Entity;
import com.epam.jwd.dao.exception.DaoException;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Objects;

/**
 * This interface is created due to DAO Pattern and provide user with CRUD methods
 *
 * @param <T> - entity to be handled
 * @param <K> - the type of the id
 */
public interface Dao<T extends Entity<K>, K> {
    Logger logger = LogManager.getLogger(Dao.class);

    /**
     * Save method which provide user with opportunity to save entity to the DataBase
     *
     * @param entity - entity to save in DataBase
     * @return - the saved entity value with generated by DataBase id
     * @throws DaoException - if the connection can't be accepted or save operation was failed
     */
    T save(T entity) throws DaoException;

    /**
     * Method which allows updating data of <T> entity in DB.
     *
     * @param entity - entity which should be updated in DB.
     * @return - true if data was updated, otherwise false or exception
     * @throws DaoException - if entity wasn't updated or SQL exception
     */
    boolean update(T entity) throws DaoException;

    /**
     * Method which allows deleting entity from DB
     *
     * @param entity - entity which should be deleted in DB.
     * @return - true if entity was deleted from DB, otherwise false or exception
     * @throws DaoException - if entity wasn't deleted or SQL exception
     */
    boolean delete(T entity) throws DaoException;

    /**
     * Method which extracts entity from DataBase with provided id
     *
     * @param id - id of provided type to find entity in DataBase
     * @return - entity of current type
     * @throws DaoException - if the connection can't be accepted or findById operation was failed
     */
    T findById(K id) throws DaoException;

    /**
     * Method which extracts all values from DataBase and put it to the List
     *
     * @return - list of entities in current DataBase table
     * @throws DaoException - if the connection can't be accepted or findAll operation was failed
     */
    List<T> findAll() throws DaoException;

    /**
     * Method which allows closing result set
     *
     * @param resultSet - result set which should be closed
     */
    default void closeResultSet(ResultSet resultSet) {
        BasicConfigurator.configure();
        if (Objects.nonNull(resultSet)) {
            try {
                resultSet.close();
            } catch (SQLException e) {
                logger.error(e);
            }
        }
    }
}
